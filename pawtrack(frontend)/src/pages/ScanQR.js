// src/pages/ScanQR.js

"use client"

import { useState } from "react"
import {
  QrCode,
  Camera,
  Search,
  AlertTriangle,
  MapPin,
  Calendar, // Keep for display logic, though backend doesn't provide treatmentDate directly
  User,     // Keep for display logic, though backend doesn't provide treatedBy directly
  Heart,
  CheckCircle,
  Plus,
  X,
  Loader2 // Import Loader icon
} from "lucide-react"
import Header from "../Components/Header"
import Footer from "../Components/Footer"
import { toast } from "react-hot-toast"; // Import toast
import { BASE_URL } from "../api/config"; // Import BASE_URL

const ScanQR = () => {
  const [qrInput, setQrInput] = useState("")
  const [isScanning, setIsScanning] = useState(false) // For camera simulation state
  const [scanningProgress, setScanningProgress] = useState(false) // For loading state
  const [treatmentRecord, setTreatmentRecord] = useState(null)
  const [showHealthyModal, setShowHealthyModal] = useState(false)
  const [showFollowUpForm, setShowFollowUpForm] = useState(false)
  const [showHealthStatus, setShowHealthStatus] = useState(false) // This is local state, not from backend directly
  const [showPopup, setShowPopup] = useState(false)
  const [popupMessage, setPopupMessage] = useState("")
  const [popupType, setPopupType] = useState("success") // success, warning, error
  const [followUpData, setFollowUpData] = useState({
    condition: "",
    urgency: "Medium Priority",
    description: "",
    name: "",
    phone: "",
  })

  // Sample QR Codes might still be useful for testing the input field
  const sampleQRCodes = ["RPT-173678912345"]; // Example - use actual codes generated by backend

  // --- MOCK DATA REMOVED ---
  // const mockTreatmentData = { ... };

  const showNotification = (message, type = "success") => {
    setPopupMessage(message)
    setPopupType(type)
    setShowPopup(true)
    setTimeout(() => {
      setShowPopup(false)
    }, 4000)
    // Using react-hot-toast instead of custom popup for simplicity
    if (type === 'success') toast.success(message);
    if (type === 'warning') toast(message); // Default toast style
    if (type === 'error') toast.error(message);
  }

  // --- UPDATED: Fetch from Backend ---
  const fetchReportByCode = async (code) => {
    if (!code || !code.trim()) return;

    console.log("Fetching report for code:", code);
    setScanningProgress(true);
    setTreatmentRecord(null); // Clear previous record
    setShowHealthStatus(false); // Reset local health status display

    try {
      const response = await fetch(`${BASE_URL}/reports/code/${code.trim()}`); // Assuming '/code/' endpoint

      if (response.ok) {
        const data = await response.json();
        console.log("Received data:", data);

        // Map backend data to frontend state
        const mappedRecord = {
          id: data.reportCode, // Use reportCode as the primary display ID
          backendId: data.id, // Keep backend numerical ID if needed later
          animalType: data.animalType,
          originalCondition: data.animalCondition, // Map field name
          location: data.location,
          createdAt: data.createdAt ? new Date(data.createdAt).toLocaleDateString() : 'N/A', // Map createdAt
          status: data.status,
          // Fields NOT directly available from backend Report entity:
          treatmentDate: 'N/A', // Placeholder - Needs backend changes to store/retrieve
          treatedBy: 'N/A',     // Placeholder - Needs backend changes
          treatmentNotes: data.description, // Use description as notes for now
          markedHealthy: 'N/A', // Placeholder - This is handled locally for now
          isHealthy: data.status?.toLowerCase() === 'treated' || data.status?.toLowerCase() === 'resolved', // Infer based on status
        };
        setTreatmentRecord(mappedRecord);
        if (mappedRecord.isHealthy) {
          setShowHealthStatus(true); // Show health status if backend status suggests it
        }

      } else if (response.status === 404) {
        toast.error(`Report with code "${code}" not found.`);
        setTreatmentRecord(null);
      } else {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
    } catch (error) {
      console.error("Error fetching report:", error);
      toast.error("Failed to fetch report details. Please try again.");
      setTreatmentRecord(null);
    } finally {
      setScanningProgress(false);
    }
  };

  const handleSearch = () => {
    fetchReportByCode(qrInput); // Use the fetch function
  }

  // --- Camera Scan still simulates, then fetches ---
  const handleCameraScan = () => {
    setIsScanning(true);
    setScanningProgress(true); // Show loading spinner immediately

    // Simulate scanning delay
    setTimeout(() => {
      setIsScanning(false);
      // Simulate finding a QR code (use a real one if possible)
      const scannedCode = sampleQRCodes[0] || "RPT-12345";
      setQrInput(scannedCode);
      fetchReportByCode(scannedCode); // Fetch data after simulated scan
    }, 2000); // Simulate 2 seconds scan
  }

  const handleSampleQRClick = (qrCode) => {
    setQrInput(qrCode);
    fetchReportByCode(qrCode); // Fetch data when sample is clicked
  }

  const handleKeyPress = (e) => {
    if (e.key === "Enter") {
      handleSearch();
    }
  }

  // --- Mark Healthy is a LOCAL state change for now ---
  // A backend call would be needed here to actually update the status permanently
  const handleMarkHealthy = async () => {
    if (!treatmentRecord || !treatmentRecord.backendId) return;

    setShowHealthyModal(false);

    // --- TODO: Add API call to update status ---
    // Example (requires updateReportStatus function in reportApi.js):
    // try {
    //   await updateReportStatus(treatmentRecord.backendId, 'Treated'); // Or 'Resolved'
    //   setTreatmentRecord({
    //     ...treatmentRecord,
    //     status: "Treated", // Or Resolved
    //     markedHealthy: new Date().toLocaleDateString(),
    //     isHealthy: true,
    //   });
    //   setShowHealthStatus(true);
    //   showNotification("Animal status updated successfully!", "success");
    // } catch (error) {
    //   console.error("Error updating status:", error);
    //   showNotification("Failed to update animal status.", "error");
    // }

    // --- Temporary Local Update ---
    setTreatmentRecord({
      ...treatmentRecord,
      status: "Treated", // Assume 'Treated' means healthy for now
      markedHealthy: new Date().toLocaleDateString(),
      isHealthy: true,
    });
    setShowHealthStatus(true);
    showNotification("Animal has been marked as healthy (Locally).", "success");
    // --- End Temporary ---
  }

  // --- Follow Up still console logs for now ---
  // This would typically involve another API call to add a follow-up note or report
  const handleFollowUpSubmit = (e) => {
    e.preventDefault()
    // --- TODO: Add API call to submit follow-up details ---
    console.log("[v0] Follow-up report submitted (Locally):", { caseId: treatmentRecord?.id, ...followUpData });
    setShowFollowUpForm(false);

    const urgencyLevel = followUpData.urgency
    let message = "Follow-up report submitted successfully."
    let type = "warning" // Use warning as default since it's local

    if (urgencyLevel === "Emergency") {
      message = "Emergency follow-up report submitted! Immediate attention required."
      type = "error"
    } else if (urgencyLevel === "High Priority") {
      message = "High priority follow-up report submitted. Urgent care needed."
      type = "error"
    } else if (urgencyLevel === "Medium Priority") {
      message = "Follow-up report submitted. Animal requires additional monitoring."
      type = "warning"
    } else {
      message = "Follow-up report submitted. Routine check recommended."
      type = "warning"
    }

    showNotification(message, type);

    setFollowUpData({
      condition: "",
      urgency: "Medium Priority",
      description: "",
      name: "",
      phone: "",
    })
  }

  return (
    <div className="min-h-screen bg-background">
      <Header />

      <main className="container mx-auto px-4 py-8">
        <div className="max-w-4xl mx-auto">
          {/* ... (Hero, Banner, Search Card structure remains the same) ... */}

           <div className="scanqr-search-card animate-fade-in-up" style={{ animationDelay: "0.2s" }}>
             <div className="mb-6">
               <div className="scanqr-search-label">
                 <Search className="w-5 h-5 text-purple-600" />
                 <span>Enter QR Code or Animal ID</span>
               </div>
               <div className="flex gap-3">
                 <input
                   type="text"
                   value={qrInput}
                   onChange={(e) => setQrInput(e.target.value)}
                   onKeyPress={handleKeyPress}
                   placeholder="RPT-1234567890 or scan QR code" // Updated placeholder
                   className="scanqr-search-input"
                 />
                 <button
                   onClick={handleSearch}
                   disabled={!qrInput.trim() || scanningProgress}
                   className="scanqr-search-button"
                 >
                   {scanningProgress ? <Loader2 className="w-4 h-4 animate-spin"/> : <Search className="w-4 h-4" />}
                   {scanningProgress ? "Searching..." : "Search"}
                 </button>
               </div>
             </div>

             <div className="scanqr-camera-area">
               {isScanning && scanningProgress && ( // Show only when camera scanning is in progress
                 <div className="scanqr-scanning-overlay">
                   <div className="text-center">
                     <div className="scanqr-scanning-spinner"></div>
                     <p className="text-purple-700 font-medium">Scanning in progress...</p>
                   </div>
                 </div>
               )}

               <div className="mb-6">
                 <img
                   src="/person-using-qr-code-scanner-with-animal-rescue-co.jpg"
                   alt="QR Code Scanning Demo"
                   className="scanqr-camera-image"
                 />
               </div>

               <button
                 onClick={handleCameraScan}
                 disabled={isScanning || scanningProgress}
                 className="scanqr-camera-button"
               >
                 <Camera className="w-5 h-5" />
                 {isScanning ? "Scanning..." : "Use Camera to Scan"}
               </button>
             </div>
           </div>

          {/* ... (Demo Section remains the same, but update sampleQRCodes if needed) ... */}

          {/* Treatment Record Display (Updated fields) */}
          {scanningProgress && !treatmentRecord && ( // Show loading indicator while fetching
             <div className="text-center py-8">
                <Loader2 className="w-8 h-8 mx-auto animate-spin text-purple-600"/>
                <p className="mt-2 text-muted-foreground">Fetching report details...</p>
             </div>
          )}

          {treatmentRecord && !scanningProgress && ( // Show record only when loaded
            <div className="animate-fade-in-up">
              <div className="scanqr-record-header">
                <div className="scanqr-record-header-content">
                  <div className="scanqr-record-title">
                    <CheckCircle className="w-6 h-6" />
                    <span>Animal Treatment Record</span>
                  </div>
                  <div className="scanqr-record-badges">
                    <div className="scanqr-record-badge">{treatmentRecord.id}</div> {/* Display reportCode */}
                  </div>
                </div>
              </div>

              <div className="scanqr-record-content">
                <div className="scanqr-record-grid">
                  {/* Animal Details */}
                  <div className="space-y-6">
                    <div className="scanqr-section-title">
                      <div className="scanqr-section-dot scanqr-purple-dot"></div>
                      <h3 className="scanqr-purple-title">Animal Details</h3>
                    </div>
                    <div className="space-y-4">
                      <div>
                        <p className="text-sm font-medium text-muted-foreground mb-1">Type:</p>
                        <p className="text-lg text-foreground">{treatmentRecord.animalType}</p>
                      </div>
                      <div>
                        <p className="text-sm font-medium text-muted-foreground mb-1">Reported condition:</p>
                        <p className="text-lg text-foreground">{treatmentRecord.originalCondition}</p>
                      </div>
                       <div>
                        <p className="text-sm font-medium text-muted-foreground mb-1">Reported:</p>
                        <p className="text-lg text-foreground">{treatmentRecord.createdAt}</p>
                      </div>
                    </div>
                    <div className="flex items-center gap-3 text-muted-foreground">
                      <MapPin className="w-5 h-5 text-purple-500" />
                      <span>{treatmentRecord.location}</span>
                    </div>
                  </div>

                  {/* Treatment History (Simplified as less data is available from backend) */}
                  <div className="space-y-6">
                    <div className="scanqr-section-title">
                      <div className="scanqr-section-dot scanqr-green-dot"></div>
                      <h3 className="scanqr-green-title">Status & History</h3>
                    </div>
                     <div className="scanqr-info-card scanqr-green-card">
                       <div className="scanqr-info-item">
                          <CheckCircle className="w-4 h-4 text-green-600" />
                          <span className="scanqr-green-text">Current Status: {treatmentRecord.status}</span>
                        </div>
                        {/* Display simplified history based on available data */}
                        <div className="scanqr-info-item">
                           <Calendar className="w-4 h-4 text-green-600" />
                           <span className="scanqr-green-text">Reported On: {treatmentRecord.createdAt}</span>
                        </div>
                        {/* Add placeholders for data not yet in backend */}
                        {/*
                        <div className="scanqr-info-item">
                           <Calendar className="w-4 h-4 text-green-600" />
                           <span className="scanqr-green-text">Treated: {treatmentRecord.treatmentDate}</span>
                        </div>
                        <div className="scanqr-info-item">
                           <User className="w-4 h-4 text-green-600" />
                           <span className="scanqr-green-text">By: {treatmentRecord.treatedBy}</span>
                        </div>
                        */}
                    </div>

                    {/* Health Status (Based on local state or inferred status) */}
                    {showHealthStatus && (
                      <div className="scanqr-info-card scanqr-green-card">
                        <div className="scanqr-section-title" style={{ marginBottom: "0.75rem" }}>
                          <Heart className="w-5 h-5 text-green-600" />
                          <h4 className="font-semibold text-green-700">Health Status</h4>
                        </div>
                        <div className="space-y-2">
                          <div className="scanqr-info-item">
                            <CheckCircle className="w-4 h-4 text-green-600" />
                            <span className="scanqr-green-text">Status: {treatmentRecord.status}</span>
                          </div>
                           {/* Only show 'markedHealthy' date if it was set locally */}
                          {treatmentRecord.markedHealthy !== 'N/A' && (
                            <div className="scanqr-info-item">
                              <Calendar className="w-4 h-4 text-green-600" />
                              <span className="scanqr-green-text">Marked Healthy: {treatmentRecord.markedHealthy}</span>
                            </div>
                          )}
                        </div>
                      </div>
                    )}
                  </div>
                </div>

                {/* Treatment Notes (Using description field for now) */}
                <div className="mb-8">
                  <div className="scanqr-section-title">
                    <div className="scanqr-section-dot scanqr-blue-dot"></div>
                    <h3 className="scanqr-blue-title">Original Report Description</h3>
                  </div>
                  <div className="scanqr-info-card scanqr-blue-card">
                    <p className="text-blue-800">{treatmentRecord.treatmentNotes}</p> {/* Was description */}
                  </div>
                </div>

                {/* Actions remain the same */}
                <div className="scanqr-actions">
                  <button
                    onClick={() => setShowFollowUpForm(true)}
                    className="scanqr-action-button scanqr-orange-button"
                  >
                    <Plus className="w-4 h-4" />
                    Report Follow-up Issue
                  </button>
                  {/* Only show "Mark as Healthy" if not already considered healthy */}
                  {!treatmentRecord.isHealthy && (
                     <button
                       onClick={() => setShowHealthyModal(true)}
                       className="scanqr-action-button scanqr-green-outline-button"
                     >
                       <Heart className="w-4 h-4" />
                       Mark as Healthy / Treated
                     </button>
                  )}
                </div>
              </div>
            </div>
          )}
        </div>
      </main>

      {/* ... (Popups and Modals remain largely the same, but ensure they use treatmentRecord.id) ... */}

       {showHealthyModal && (
         <div className="scanqr-modal-overlay">
           <div className="scanqr-modal animate-fade-in-up">
             {/* ... Modal content ... */}
             <div className="scanqr-modal-info">
               <p><span className="font-medium">Animal ID:</span> {treatmentRecord?.id}</p>
               <p><span className="font-medium">Type:</span> {treatmentRecord?.animalType}</p>
               <p><span className="font-medium">Location:</span> {treatmentRecord?.location}</p>
             </div>
             {/* ... Modal actions ... */}
           </div>
         </div>
       )}

       {showFollowUpForm && (
         <div className="scanqr-modal-overlay">
           {/* ... Follow-up Form ... */}
         </div>
       )}

      <Footer />
    </div>
  )
}

export default ScanQR;
